// Code generated by protoc-gen-go. DO NOT EDIT.
// source: calendar.proto

package calendarpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EventID struct {
	ID                   uint64   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventID) Reset()         { *m = EventID{} }
func (m *EventID) String() string { return proto.CompactTextString(m) }
func (*EventID) ProtoMessage()    {}
func (*EventID) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{0}
}

func (m *EventID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventID.Unmarshal(m, b)
}
func (m *EventID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventID.Marshal(b, m, deterministic)
}
func (m *EventID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventID.Merge(m, src)
}
func (m *EventID) XXX_Size() int {
	return xxx_messageInfo_EventID.Size(m)
}
func (m *EventID) XXX_DiscardUnknown() {
	xxx_messageInfo_EventID.DiscardUnknown(m)
}

var xxx_messageInfo_EventID proto.InternalMessageInfo

func (m *EventID) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type Status struct {
	OK                   bool     `protobuf:"varint,1,opt,name=OK,proto3" json:"OK,omitempty"`
	ErrorCode            uint32   `protobuf:"varint,2,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Error                string   `protobuf:"bytes,3,opt,name=Error,proto3" json:"Error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{1}
}

func (m *Status) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Status.Unmarshal(m, b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Status.Marshal(b, m, deterministic)
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return xxx_messageInfo_Status.Size(m)
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetOK() bool {
	if m != nil {
		return m.OK
	}
	return false
}

func (m *Status) GetErrorCode() uint32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *Status) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type ResponseEvents struct {
	Status               *Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	List                 []*Event `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResponseEvents) Reset()         { *m = ResponseEvents{} }
func (m *ResponseEvents) String() string { return proto.CompactTextString(m) }
func (*ResponseEvents) ProtoMessage()    {}
func (*ResponseEvents) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{2}
}

func (m *ResponseEvents) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResponseEvents.Unmarshal(m, b)
}
func (m *ResponseEvents) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResponseEvents.Marshal(b, m, deterministic)
}
func (m *ResponseEvents) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseEvents.Merge(m, src)
}
func (m *ResponseEvents) XXX_Size() int {
	return xxx_messageInfo_ResponseEvents.Size(m)
}
func (m *ResponseEvents) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseEvents.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseEvents proto.InternalMessageInfo

func (m *ResponseEvents) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ResponseEvents) GetList() []*Event {
	if m != nil {
		return m.List
	}
	return nil
}

type ResponseEvent struct {
	Status               *Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Item                 *Event   `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResponseEvent) Reset()         { *m = ResponseEvent{} }
func (m *ResponseEvent) String() string { return proto.CompactTextString(m) }
func (*ResponseEvent) ProtoMessage()    {}
func (*ResponseEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{3}
}

func (m *ResponseEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResponseEvent.Unmarshal(m, b)
}
func (m *ResponseEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResponseEvent.Marshal(b, m, deterministic)
}
func (m *ResponseEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseEvent.Merge(m, src)
}
func (m *ResponseEvent) XXX_Size() int {
	return xxx_messageInfo_ResponseEvent.Size(m)
}
func (m *ResponseEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseEvent proto.InternalMessageInfo

func (m *ResponseEvent) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ResponseEvent) GetItem() *Event {
	if m != nil {
		return m.Item
	}
	return nil
}

type Event struct {
	Id                   uint64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId               uint64               `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Title                string               `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Description          string               `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Time                 *timestamp.Timestamp `protobuf:"bytes,5,opt,name=time,proto3" json:"time,omitempty"`
	Duration             *duration.Duration   `protobuf:"bytes,6,opt,name=duration,proto3" json:"duration,omitempty"`
	NoticePeriod         *duration.Duration   `protobuf:"bytes,7,opt,name=notice_period,json=noticePeriod,proto3" json:"notice_period,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{4}
}

func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Event) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *Event) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Event) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Event) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *Event) GetDuration() *duration.Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

func (m *Event) GetNoticePeriod() *duration.Duration {
	if m != nil {
		return m.NoticePeriod
	}
	return nil
}

type Notification struct {
	EventId              uint64               `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	UserId               uint64               `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Title                string               `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Time                 *timestamp.Timestamp `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Notification) Reset()         { *m = Notification{} }
func (m *Notification) String() string { return proto.CompactTextString(m) }
func (*Notification) ProtoMessage()    {}
func (*Notification) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{5}
}

func (m *Notification) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Notification.Unmarshal(m, b)
}
func (m *Notification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Notification.Marshal(b, m, deterministic)
}
func (m *Notification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Notification.Merge(m, src)
}
func (m *Notification) XXX_Size() int {
	return xxx_messageInfo_Notification.Size(m)
}
func (m *Notification) XXX_DiscardUnknown() {
	xxx_messageInfo_Notification.DiscardUnknown(m)
}

var xxx_messageInfo_Notification proto.InternalMessageInfo

func (m *Notification) GetEventId() uint64 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *Notification) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *Notification) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Notification) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func init() {
	proto.RegisterType((*EventID)(nil), "calendar.EventID")
	proto.RegisterType((*Status)(nil), "calendar.Status")
	proto.RegisterType((*ResponseEvents)(nil), "calendar.ResponseEvents")
	proto.RegisterType((*ResponseEvent)(nil), "calendar.ResponseEvent")
	proto.RegisterType((*Event)(nil), "calendar.Event")
	proto.RegisterType((*Notification)(nil), "calendar.Notification")
}

func init() { proto.RegisterFile("calendar.proto", fileDescriptor_e3d25d49f056cdb2) }

var fileDescriptor_e3d25d49f056cdb2 = []byte{
	// 497 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0x4b, 0x6f, 0xd3, 0x40,
	0x10, 0x56, 0x5c, 0xe7, 0xd1, 0xc9, 0xa3, 0x65, 0x85, 0x54, 0xc7, 0x42, 0x10, 0x99, 0x4b, 0x4e,
	0xae, 0x14, 0x84, 0xb8, 0x71, 0x20, 0x2e, 0x60, 0xb5, 0x10, 0xb4, 0x80, 0x90, 0x38, 0x10, 0x39,
	0xd9, 0x69, 0x59, 0xe1, 0x78, 0xad, 0xdd, 0x0d, 0x12, 0xff, 0x00, 0x89, 0x03, 0x7f, 0x19, 0x79,
	0x1c, 0x27, 0x69, 0xca, 0x2b, 0x3d, 0xce, 0x7c, 0x8f, 0xf1, 0x7e, 0x9f, 0xa1, 0x37, 0x4f, 0x52,
	0xcc, 0x44, 0xa2, 0xc3, 0x5c, 0x2b, 0xab, 0x58, 0xab, 0x9a, 0xfd, 0x07, 0x57, 0x4a, 0x5d, 0xa5,
	0x78, 0x4a, 0xfb, 0xd9, 0xf2, 0xf2, 0xd4, 0xca, 0x05, 0x1a, 0x9b, 0x2c, 0xf2, 0x92, 0xea, 0xdf,
	0xdf, 0x25, 0x88, 0xa5, 0x4e, 0xac, 0x54, 0x59, 0x89, 0x07, 0x7d, 0x68, 0x9e, 0x7d, 0xc5, 0xcc,
	0xc6, 0x11, 0xeb, 0x81, 0x13, 0x47, 0x5e, 0x6d, 0x50, 0x1b, 0xba, 0xdc, 0x89, 0xa3, 0xe0, 0x02,
	0x1a, 0x6f, 0x6d, 0x62, 0x97, 0xa6, 0x40, 0x26, 0xe7, 0x84, 0xb4, 0xb8, 0x33, 0x39, 0x67, 0xf7,
	0xe0, 0xf0, 0x4c, 0x6b, 0xa5, 0xc7, 0x4a, 0xa0, 0xe7, 0x0c, 0x6a, 0xc3, 0x2e, 0xdf, 0x2c, 0xd8,
	0x5d, 0xa8, 0xd3, 0xe0, 0x1d, 0x0c, 0x6a, 0xc3, 0x43, 0x5e, 0x0e, 0xc1, 0x14, 0x7a, 0x1c, 0x4d,
	0xae, 0x32, 0x83, 0x74, 0xd0, 0xb0, 0x21, 0x34, 0x0c, 0xf9, 0x93, 0x73, 0x7b, 0x74, 0x1c, 0xae,
	0x9f, 0x59, 0xde, 0xe5, 0x2b, 0x9c, 0x3d, 0x04, 0x37, 0x95, 0xc6, 0x7a, 0xce, 0xe0, 0x60, 0xd8,
	0x1e, 0x1d, 0x6d, 0x78, 0xe4, 0xc4, 0x09, 0x0c, 0x3e, 0x41, 0xf7, 0xda, 0x81, 0xfd, 0xfc, 0xa5,
	0xc5, 0x05, 0x3d, 0xe5, 0x77, 0xfe, 0x05, 0x18, 0xfc, 0x74, 0xa0, 0x5e, 0x1a, 0xf7, 0xc0, 0x91,
	0xa2, 0x0a, 0x4a, 0x0a, 0x76, 0x02, 0xcd, 0xa5, 0x41, 0x3d, 0x95, 0x82, 0x1c, 0x5c, 0xde, 0x28,
	0xc6, 0x58, 0x14, 0x49, 0x58, 0x69, 0x53, 0xac, 0x92, 0xa0, 0x81, 0x0d, 0xa0, 0x2d, 0xd0, 0xcc,
	0xb5, 0xcc, 0x8b, 0x1e, 0x3c, 0x97, 0xb0, 0xed, 0x15, 0x0b, 0xc1, 0x2d, 0x7a, 0xf4, 0xea, 0xf4,
	0x3d, 0x7e, 0x58, 0x76, 0x18, 0x56, 0x1d, 0x86, 0xef, 0xaa, 0x92, 0x39, 0xf1, 0xd8, 0x63, 0x68,
	0x55, 0xb5, 0x7a, 0x0d, 0xd2, 0xf4, 0x6f, 0x68, 0xa2, 0x15, 0x81, 0xaf, 0xa9, 0xec, 0x29, 0x74,
	0x33, 0x65, 0xe5, 0x1c, 0xa7, 0x39, 0x6a, 0xa9, 0x84, 0xd7, 0xfc, 0x97, 0xb6, 0x53, 0xf2, 0xdf,
	0x10, 0x3d, 0xf8, 0x5e, 0x83, 0xce, 0x6b, 0x65, 0xe5, 0xa5, 0x9c, 0x97, 0x86, 0x7d, 0x68, 0x61,
	0x91, 0xd0, 0x74, 0x1d, 0x4f, 0x93, 0xe6, 0x78, 0xef, 0x8c, 0xaa, 0x04, 0xdc, 0xff, 0x4b, 0x60,
	0xf4, 0xe3, 0x00, 0x5a, 0xe3, 0x55, 0x6b, 0xec, 0x09, 0xb4, 0xa9, 0xa8, 0xb1, 0xc6, 0xc4, 0x22,
	0xdb, 0xed, 0xd3, 0x3f, 0xd9, 0x2c, 0xae, 0xff, 0x31, 0x95, 0xf0, 0x7d, 0x2e, 0xf6, 0x13, 0x8e,
	0x56, 0xc2, 0x08, 0x53, 0xb4, 0xc8, 0xee, 0xec, 0x08, 0xe3, 0xc8, 0xbf, 0xf1, 0xf3, 0xb1, 0xe7,
	0xd0, 0x23, 0xf0, 0x42, 0x1a, 0x3b, 0xc9, 0xa2, 0xe4, 0x1b, 0xfb, 0xcb, 0x33, 0x7d, 0xef, 0x0f,
	0xa7, 0x0d, 0x7b, 0x01, 0x47, 0x5b, 0x3e, 0x1f, 0x10, 0xbf, 0xdc, 0xd2, 0xe8, 0x25, 0x1c, 0x6f,
	0x19, 0xbd, 0x52, 0x99, 0xfd, 0x7c, 0x3b, 0xa7, 0x67, 0x9d, 0x8f, 0x50, 0x41, 0xf9, 0x6c, 0xd6,
	0x20, 0xed, 0xa3, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x44, 0xc8, 0x12, 0xa2, 0xc6, 0x04, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CalendarClient is the client API for Calendar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CalendarClient interface {
	EventCreate(ctx context.Context, in *Event, opts ...grpc.CallOption) (*ResponseEvent, error)
	EventUpdate(ctx context.Context, in *Event, opts ...grpc.CallOption) (*ResponseEvent, error)
	EventDelete(ctx context.Context, in *EventID, opts ...grpc.CallOption) (*Status, error)
	EventListOnDay(ctx context.Context, in *timestamp.Timestamp, opts ...grpc.CallOption) (*ResponseEvents, error)
	EventListOnWeek(ctx context.Context, in *timestamp.Timestamp, opts ...grpc.CallOption) (*ResponseEvents, error)
	EventListOnMonth(ctx context.Context, in *timestamp.Timestamp, opts ...grpc.CallOption) (*ResponseEvents, error)
}

type calendarClient struct {
	cc *grpc.ClientConn
}

func NewCalendarClient(cc *grpc.ClientConn) CalendarClient {
	return &calendarClient{cc}
}

func (c *calendarClient) EventCreate(ctx context.Context, in *Event, opts ...grpc.CallOption) (*ResponseEvent, error) {
	out := new(ResponseEvent)
	err := c.cc.Invoke(ctx, "/calendar.Calendar/EventCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) EventUpdate(ctx context.Context, in *Event, opts ...grpc.CallOption) (*ResponseEvent, error) {
	out := new(ResponseEvent)
	err := c.cc.Invoke(ctx, "/calendar.Calendar/EventUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) EventDelete(ctx context.Context, in *EventID, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/calendar.Calendar/EventDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) EventListOnDay(ctx context.Context, in *timestamp.Timestamp, opts ...grpc.CallOption) (*ResponseEvents, error) {
	out := new(ResponseEvents)
	err := c.cc.Invoke(ctx, "/calendar.Calendar/EventListOnDay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) EventListOnWeek(ctx context.Context, in *timestamp.Timestamp, opts ...grpc.CallOption) (*ResponseEvents, error) {
	out := new(ResponseEvents)
	err := c.cc.Invoke(ctx, "/calendar.Calendar/EventListOnWeek", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) EventListOnMonth(ctx context.Context, in *timestamp.Timestamp, opts ...grpc.CallOption) (*ResponseEvents, error) {
	out := new(ResponseEvents)
	err := c.cc.Invoke(ctx, "/calendar.Calendar/EventListOnMonth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalendarServer is the server API for Calendar service.
type CalendarServer interface {
	EventCreate(context.Context, *Event) (*ResponseEvent, error)
	EventUpdate(context.Context, *Event) (*ResponseEvent, error)
	EventDelete(context.Context, *EventID) (*Status, error)
	EventListOnDay(context.Context, *timestamp.Timestamp) (*ResponseEvents, error)
	EventListOnWeek(context.Context, *timestamp.Timestamp) (*ResponseEvents, error)
	EventListOnMonth(context.Context, *timestamp.Timestamp) (*ResponseEvents, error)
}

// UnimplementedCalendarServer can be embedded to have forward compatible implementations.
type UnimplementedCalendarServer struct {
}

func (*UnimplementedCalendarServer) EventCreate(ctx context.Context, req *Event) (*ResponseEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EventCreate not implemented")
}
func (*UnimplementedCalendarServer) EventUpdate(ctx context.Context, req *Event) (*ResponseEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EventUpdate not implemented")
}
func (*UnimplementedCalendarServer) EventDelete(ctx context.Context, req *EventID) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EventDelete not implemented")
}
func (*UnimplementedCalendarServer) EventListOnDay(ctx context.Context, req *timestamp.Timestamp) (*ResponseEvents, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EventListOnDay not implemented")
}
func (*UnimplementedCalendarServer) EventListOnWeek(ctx context.Context, req *timestamp.Timestamp) (*ResponseEvents, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EventListOnWeek not implemented")
}
func (*UnimplementedCalendarServer) EventListOnMonth(ctx context.Context, req *timestamp.Timestamp) (*ResponseEvents, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EventListOnMonth not implemented")
}

func RegisterCalendarServer(s *grpc.Server, srv CalendarServer) {
	s.RegisterService(&_Calendar_serviceDesc, srv)
}

func _Calendar_EventCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).EventCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendar.Calendar/EventCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).EventCreate(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_EventUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).EventUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendar.Calendar/EventUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).EventUpdate(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_EventDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).EventDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendar.Calendar/EventDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).EventDelete(ctx, req.(*EventID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_EventListOnDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(timestamp.Timestamp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).EventListOnDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendar.Calendar/EventListOnDay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).EventListOnDay(ctx, req.(*timestamp.Timestamp))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_EventListOnWeek_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(timestamp.Timestamp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).EventListOnWeek(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendar.Calendar/EventListOnWeek",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).EventListOnWeek(ctx, req.(*timestamp.Timestamp))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_EventListOnMonth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(timestamp.Timestamp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).EventListOnMonth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendar.Calendar/EventListOnMonth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).EventListOnMonth(ctx, req.(*timestamp.Timestamp))
	}
	return interceptor(ctx, in, info, handler)
}

var _Calendar_serviceDesc = grpc.ServiceDesc{
	ServiceName: "calendar.Calendar",
	HandlerType: (*CalendarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EventCreate",
			Handler:    _Calendar_EventCreate_Handler,
		},
		{
			MethodName: "EventUpdate",
			Handler:    _Calendar_EventUpdate_Handler,
		},
		{
			MethodName: "EventDelete",
			Handler:    _Calendar_EventDelete_Handler,
		},
		{
			MethodName: "EventListOnDay",
			Handler:    _Calendar_EventListOnDay_Handler,
		},
		{
			MethodName: "EventListOnWeek",
			Handler:    _Calendar_EventListOnWeek_Handler,
		},
		{
			MethodName: "EventListOnMonth",
			Handler:    _Calendar_EventListOnMonth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calendar.proto",
}
