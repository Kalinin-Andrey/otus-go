// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chatpb/chat.proto

package chat

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ChatMessage struct {
	Id                   int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Text                 string               `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Created              *timestamp.Timestamp `protobuf:"bytes,3,opt,name=created,proto3" json:"created,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ChatMessage) Reset()         { *m = ChatMessage{} }
func (m *ChatMessage) String() string { return proto.CompactTextString(m) }
func (*ChatMessage) ProtoMessage()    {}
func (*ChatMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_41cf34dba7f8bdf6, []int{0}
}

func (m *ChatMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChatMessage.Unmarshal(m, b)
}
func (m *ChatMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChatMessage.Marshal(b, m, deterministic)
}
func (m *ChatMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatMessage.Merge(m, src)
}
func (m *ChatMessage) XXX_Size() int {
	return xxx_messageInfo_ChatMessage.Size(m)
}
func (m *ChatMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ChatMessage proto.InternalMessageInfo

func (m *ChatMessage) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ChatMessage) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *ChatMessage) GetCreated() *timestamp.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func init() {
	proto.RegisterType((*ChatMessage)(nil), "chat.ChatMessage")
}

func init() { proto.RegisterFile("chatpb/chat.proto", fileDescriptor_41cf34dba7f8bdf6) }

var fileDescriptor_41cf34dba7f8bdf6 = []byte{
	// 185 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0xce, 0x41, 0x0b, 0x82, 0x30,
	0x14, 0x07, 0x70, 0xa6, 0x52, 0x34, 0x21, 0x70, 0x27, 0xf1, 0x92, 0x74, 0xf2, 0x34, 0x41, 0xfb,
	0x04, 0x45, 0xc7, 0x2e, 0xd2, 0x17, 0x98, 0xee, 0x35, 0x05, 0x6d, 0xc3, 0xbd, 0xc0, 0x8f, 0x1f,
	0x4e, 0x06, 0x41, 0xa7, 0xf7, 0xf8, 0xf3, 0x87, 0xdf, 0x9f, 0x26, 0x5d, 0x2f, 0xd0, 0xb4, 0xe5,
	0x7a, 0xb8, 0x99, 0x35, 0x6a, 0x16, 0xad, 0x7f, 0x76, 0x52, 0x5a, 0xab, 0x11, 0x4a, 0x97, 0xb5,
	0x9f, 0x57, 0x89, 0xc3, 0x04, 0x16, 0xc5, 0x64, 0xb6, 0xda, 0x59, 0xd1, 0xf8, 0xd6, 0x0b, 0x7c,
	0x80, 0xb5, 0x42, 0x01, 0x3b, 0xd2, 0x60, 0x90, 0x29, 0xc9, 0x49, 0x11, 0x36, 0xc1, 0x20, 0x19,
	0xa3, 0x11, 0xc2, 0x82, 0x69, 0x90, 0x93, 0xe2, 0xd0, 0xb8, 0x9f, 0x5d, 0xe8, 0xbe, 0x9b, 0x41,
	0x20, 0xc8, 0x34, 0xcc, 0x49, 0x11, 0x57, 0x19, 0xdf, 0x14, 0xee, 0x15, 0xfe, 0xf4, 0x4a, 0xe3,
	0xab, 0xd5, 0x75, 0x83, 0xee, 0x8b, 0x98, 0xcc, 0x08, 0xac, 0xa6, 0xb1, 0x85, 0xb7, 0xf4, 0x6e,
	0xc2, 0xdd, 0xf4, 0x9f, 0x29, 0xd9, 0x7f, 0xd4, 0xee, 0x1c, 0x50, 0x7f, 0x03, 0x00, 0x00, 0xff,
	0xff, 0x2e, 0xab, 0xb3, 0xba, 0xef, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ChatExampleClient is the client API for ChatExample service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChatExampleClient interface {
	SendMessage(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*ChatMessage, error)
}

type chatExampleClient struct {
	cc grpc.ClientConnInterface
}

func NewChatExampleClient(cc grpc.ClientConnInterface) ChatExampleClient {
	return &chatExampleClient{cc}
}

func (c *chatExampleClient) SendMessage(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*ChatMessage, error) {
	out := new(ChatMessage)
	err := c.cc.Invoke(ctx, "/chat.ChatExample/sendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatExampleServer is the server API for ChatExample service.
type ChatExampleServer interface {
	SendMessage(context.Context, *ChatMessage) (*ChatMessage, error)
}

// UnimplementedChatExampleServer can be embedded to have forward compatible implementations.
type UnimplementedChatExampleServer struct {
}

func (*UnimplementedChatExampleServer) SendMessage(ctx context.Context, req *ChatMessage) (*ChatMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}

func RegisterChatExampleServer(s *grpc.Server, srv ChatExampleServer) {
	s.RegisterService(&_ChatExample_serviceDesc, srv)
}

func _ChatExample_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatExampleServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatExample/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatExampleServer).SendMessage(ctx, req.(*ChatMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChatExample_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChatExample",
	HandlerType: (*ChatExampleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "sendMessage",
			Handler:    _ChatExample_SendMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chatpb/chat.proto",
}
